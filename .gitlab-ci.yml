

image: python:latest


variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  CI_PRIVATE_TOKEN: "$CI_PRIVATE_TOKEN"
  CI_PROJECT_ID: "$CI_PROJECT_ID"
  CI_AUTO_SEMVER: "$CI_AUTO_SEMVER"

workflow:
  rules:
    - if: $CI_COMMIT_TAG 
      when: never
    - when: always
    # - if: '$CI_PIPELINE_SOURCE == "push"'

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

stages:
  - setup
  - versioning


pip_install:
  stage:
    setup
  script:
    # - echo ${CI_COMMIT_BRANCH}
    # - echo ${CI_COMMIT_REF_PROTECTED}
    # - echo ${CI_COMMIT_SHORT_SHA}
    # - echo ${CI_PRIVATE_TOKEN}
    - echo ${CI_COMMIT_REF_PROTECTED}
    - echo ${CI_COMMIT_BRANCH}
    - echo ${CI_PIPELINE_SOURCE}
    - echo ${CI_MERGE_REQUEST_LABELS}
    - echo ${CI_AUTO_SEMVER}
    - echo ${CI_COMMIT_TAG}

set_semver_tag:
  stage:
    versioning
  script:
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - python update_semver.py

    - echo ${CI_COMMIT_REF_PROTECTED}
    - echo ${CI_COMMIT_BRANCH}
    - echo ${CI_PIPELINE_SOURCE}
    - echo ${CI_MERGE_REQUEST_LABELS}
    - echo ${CI_AUTO_SEMVER}
    - echo ${CI_COMMIT_TAG}
  rules:
    # - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    #   when: manual
    - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH == "main" && $CI_AUTO_SEMVER == "true"
    # - if: $CI_AUTO_SEMVER == "true"
    # - if: $CI_COMMIT_TAG
    #   when: never
  needs: ["pip_install"]

  
